#
#     Copyright (C) 2013-2014  the original author or authors.
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License,
#     any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>
#

log4j.properties.file=log4j.xml
#br.cic.unb.chord.util.logging.off=on

#Inform that the system's topology is master/slave. The master is always the bootstrap node.
br.cic.unb.chord.topology.master.slave.enable=false

#Service Implementation
br.cic.unb.chord.service.impl.class.name       = br.cic.unb.overlay.chord.Chord

#Protocol type - default, socket, jxta
br.cic.unb.chord.communication.proxy.default.type.class  				=br.cic.unb.chord.communication.socket.SocketProxy

#socket
br.cic.unb.chord.communication.proxy.socket.type.class   				=br.cic.unb.chord.communication.socket.SocketProxy
br.cic.unb.chord.communication.proxy.default.socket.port 				=4242

#jxta
br.cic.unb.chord.communication.proxy.jxta.type.class   					=br.cic.unb.chord.communication.jxta.JxtaProxy
br.cic.unb.chord.communication.proxy.default.jxta.port 					=9142

#Endpoint
br.cic.unb.chord.communication.endpoint.socket.class 					=br.cic.unb.chord.communication.socket.SocketEndpoint
br.cic.unb.chord.communication.endpoint.jxta.class   					=br.cic.unb.chord.communication.jxta.JxtaEndpoint

# Number of bytes of displayed IDs
br.cic.unb.chord.data.id.number.of.displayed.bytes						=20
# Representation chosen when displaying IDs. 0 = binary, 1 = decimal, 2 = hexadecimal
br.cic.unb.chord.data.id.displayed.representation						=2

#Number of successors. Must be greater or equal to 1. 
br.cic.unb.chord.service.impl.successors								=1
br.cic.unb.chord.service.dht.replica.enable								=true

#Number of threads for asynchronous executions
br.cic.unb.chord.service.impl.asyncthread.no							=10

# Start times and intervals of maintenance tasks
br.cic.unb.chord.service.stabilizetask.start   							=12
br.cic.unb.chord.service.stabilizetask.interval							=12
br.cic.unb.chord.service.fixfingertask.start							=1
br.cic.unb.chord.service.fixfingertask.interval							=12
br.cic.unb.chord.service.checkpredecessortask.start    					=6
br.cic.unb.chord.service.checkpredecessortask.interval 					=12
br.cic.unb.chord.service.executortask.start								=10
br.cic.unb.chord.service.executortask.interval							=10

#ThreadPool for incoming requests (relevant when using socket protocol)
br.cic.unb.chord.communication.socket.invocationthread.corepoolsize		=10
br.cic.unb.chord.communication.socket.invocationthread.maxpoolsize		=50
#time to keep idle threads alive before termination in seconds
br.cic.unb.chord.communication.socket.invocationthread.keepalivetime	=10