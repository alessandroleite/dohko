/**
 *     Copyright (C) 2013-2014  the original author or authors.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License,
 *     any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
package br.cic.unb.overlay.chord;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import br.cic.unb.chord.data.ID;
import br.cic.unb.chord.data.URL;
import br.cic.unb.overlay.Key;

import static com.google.common.base.Preconditions.*;

/**
 * Provides a hash function for calculating the hash value out of {@link Key} or {@link URL} objects.
 */
public final class HashFunction
{
    /**
     * Singleton instance of this class.
     */
    private static HashFunction INSTANCE = new HashFunction();

    /**
     * Returns the singleton instance of this class.
     * 
     * @return Singleton instance of HashFunction.
     * @throws RuntimeException
     *             If there is an internal problem with the specified hash function of the Java API.
     */
    public static HashFunction getHashFunction()
    {
        return INSTANCE;
    }

    /**
     * Message digest for calculating hash values.
     */
    private final MessageDigest messageDigest;

    /**
     * Singleton class.
     */
    private HashFunction()
    {
        try
        {
            this.messageDigest = MessageDigest.getInstance("SHA-1");
        }
        catch (NoSuchAlgorithmException e)
        {
            throw new RuntimeException("The SHA-1 algorithm is not available!", e);
        }
    }

    /**
     * Returns the length of IDs generated by this hash function.
     * 
     * @return Number of bytes of generated IDs.
     */
    final int getLengthOfIDsInBytes()
    {
        return this.messageDigest.getDigestLength();
    }

    /**
     * Calculates the hash value for a given data Key.
     * 
     * @param entry
     * @return ID for the given Key.
     */
    public final ID getHashKey(Key entry)
    {
        checkNotNull(entry, "Parameter entry must not be null!");
        checkState(entry.getBytes() != null && entry.getBytes().length > 0, "Byte representation of key must not be null or have size 0!");

        byte[] testBytes = entry.getBytes();
        return this.createID(testBytes);
    }

    public final ID createID(byte[] testBytes)
    {
        return new ID(digest(testBytes));
    }

    /**
     * Calculates the hash value for a given URL.
     * 
     * @param incomingURL
     * @return
     */
    public byte[] digest(URL incomingURL)
    {
        return this.digest(incomingURL.toString().getBytes());
    }
    
    public String digest(String value)
    {
        return new String(this.digest(value.getBytes()));
    }

    byte[] digest(byte[] bytes)
    {
        synchronized (this.messageDigest)
        {
            this.messageDigest.reset();
            this.messageDigest.update(bytes);
            return this.messageDigest.digest();
        }
    }

    /**
     * Calculates the hash value for a given URL.
     * 
     * @param incomingURL
     *            URL of current node which is used to create a pseudo-unique ID.
     * @return ID for the given URL.
     * @throws IllegalArgumentException
     *             If <code>incomingURL</code> is null!
     */
    final ID createUniqueNodeID(URL incomingURL)
    {
        checkNotNull(incomingURL, "incomingURL");
        return this.createID(incomingURL.toString().getBytes());
    }
}
