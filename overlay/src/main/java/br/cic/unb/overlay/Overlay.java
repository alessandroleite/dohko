/**
 *     Copyright (C) 2013-2014  the original author or authors.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License,
 *     any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
package br.cic.unb.overlay;

import java.io.Serializable;
import java.util.Set;

import br.cic.unb.chord.communication.Node;
import br.cic.unb.chord.data.ID;
import br.cic.unb.chord.data.Peer;
import br.cic.unb.chord.data.URL;
import br.cic.unb.overlay.chord.EntryInsertedListener;

/**
 * Provides all methods necessary for a user application. This includes methods for changing connectivity to the network (create, join, leave) as well
 * as for working with content (insert, retrieve, remove).
 */
public interface Overlay
{
    /**
     * Returns the {@link URL} of the local node; is <code>null</code> if no network has been created or joined.
     * 
     * @return {@link URL} of local node.
     */
    URL getURL();

    /**
     * Returns the {@link ID} of the local node; is <code>null</code> if no network has been created or joined.
     * 
     * @return {@link ID} of local node.
     */
    ID getID();
    
    /**
     * Returns all neighbors of this overlay. It can be helpful to implement other routing model such as gossip based on this overlay.
     * 
     * <p>
     * <strong>Note:</strong>The first and the second indexes are respectively the predecessor and successor.
     * </p>
     * 
     * @return The neighbors' IDs.
     */
    Peer[] getNeighbors();

    /**
     * Returns <code>true</code> if the overlay is connected. In other words, if the node had joined a network.
     * @return if this node had joined a network.
     */
    boolean isConnected();
    
    /**
     * Returns the uptime of this node in milliseconds.
     * 
     * @return uptime of this node in milliseconds.
     */
    long getUptime();
    
    /**
     * Returns <code>true</code> if the overlay is connected. In other words, if the node had joined a network.
     * @return if this node had joined a network.
     */
    Peer getBootStrap();

    /**
     * Creates an overlay network which is not connected to any other node. The node ID is generated by applying a hash function on the node
     * {@link URL}.
     * 
     * @param localURL
     *            {@link URL} on which this node accepts incoming requests from other chord nodes. The {@link ID} of this node is generated by
     *            applying a hash function on the node {@link URL}.
     * @throws NullPointerException
     *             If <code>localURL</code> is <code>null</code>.
     * @throws OverlayException
     */
    void create(URL localURL) throws OverlayException;

    /**
     * Creates an overlay which is not connected to any other node.
     * 
     * @param localURL
     *            {@link URL} on which this node accepts incoming requests from other nodes.
     * @param localID
     *            {@link ID} of this node.
     * @throws NullPointerException
     *             If <code>localURL</code> or <code>localID</code> is <code>null</code>.
     * @throws OverlayException
     */
    void create(URL localURL, ID localID) throws OverlayException;

    /**
     * Joins an existing chord network and announces its presence to the other nodes. The node {@link ID} is generated by applying a hash function on
     * the node {@link URL}.
     * 
     * @param localURL
     *            The local node is made available under this {@link URL}.
     * @param bootstrapURL
     *            {@link URL} of one existing node which is used as bootstrap node.
     * @throws NullPointerException
     *             If <code>localURL</code> or <code>bootstrapURL</code> is <code>null</code>.
     * @throws OverlayException
     *             If joining fails this exception is thrown. This may be due to failure of establishing an endpoint or communication problems when
     *             contacting the bootstrap node.
     */
    void join(URL localURL, URL bootstrapURL) throws OverlayException;

    /**
     * Joins an existing chord network and announces its presence to the other nodes.
     * 
     * @param localURL
     *            The local node is made available under this {@link URL}.
     * @param localID
     *            {@link ID} of this node.
     * @param bootstrapURL
     *            {@link URL} of one existing node which is used as bootstrap node.
     * @throws NullPointerException
     *             If <code>localURL</code>, <code>localID</code>, or <code>bootstrapURL</code> is <code>null</code>.
     * @throws OverlayException
     *             If joining fails this exception is thrown. This may be due to failure of establishing an endpoint or communication problems when
     *             contacting the bootstrap node.
     */
    void join(URL localURL, ID localID, URL bootstrapURL) throws OverlayException;

    /**
     * Disconnects from the network.
     * 
     * @throws OverlayException
     *             If properly leaving the network fails this exception is thrown. The network might have been left as if the local node has failed.
     *             However, disconnecting from the network is done in every case.
     */
    void leave() throws OverlayException;

    /**
     * Inserts a new data object into the network with the given key. If two or more objects with same keys exist, all of them are stored.
     * 
     * @param key
     *            Key, under which the new item is stored.
     * @param object
     *            Object for storage in the network.
     * @throws NullPointerException
     *             If key or object is <code>null</code>.
     * @throws OverlayException
     *             Thrown if insertion failed. The effect of the insertion operation is undefined if this exception occurs.
     */
    void insert(Key key, Serializable object) throws OverlayException;

    /**
     * Attempts to find all objects with the given key.
     * 
     * @param key
     *            Key for which objects shall be retrieved.
     * @return All objects stored under the given key. The {@link Set} is never <code>null</code>.
     * @throws NullPointerException
     *             If <code>key</code> is <code>null</code>.
     * @throws OverlayException
     *             Is thrown if retrieval failed, e.g. due to a communication failure. However, the network is left in a stable state.
     */
    Set<Serializable> retrieve(Key key) throws OverlayException;

    /**
     * Removes the given object stored under given key from the network.
     * 
     * @param key
     *            Key under which the object currently is stored.
     * @param object
     *            Object to remove from the network.
     * @throws NullPointerException
     *             If key or object is <code>null</code>.
     * @throws OverlayException
     *             Thrown if deletion failed. The effect of the delete operation is undefined if this exception occurs.
     */
    void remove(Key key, Serializable object) throws OverlayException;

    /**
     * Returns the {@link Node} which is responsible for the given {@link ID}.
     * 
     * @param id
     *            The {@link ID} for which the {@link Node} is responsible for.
     * @return Reference for the node which is responsible for the given {@link ID}.
     * @throws NullPointerException
     *             If {@code id} is <code>null</code>.
     */
    Peer find(ID id);

    /**
     * Register a listener interested in the entries added.
     * 
     * @param listener
     *            The listener to be notified when new entries are added. Might not be <code>null</code>.
     * @throws NullPointerException
     *             if the listener is <code>null</code>.
     */
    void registerEntryListener(EntryInsertedListener listener);

    /**
     * Asynchronous method to retrieve the entries associated with <code>key</code>. Implementations of this method must return immediately and the
     * result of the retrieval must be passed to the provided <code>callback</code> instance.
     * 
     * @param key
     *            The key for which the associated entries should be retrieved.
     * 
     * @param callback
     *            The {@link OverlayOperationCallback} to which to pass the retrieval result.
     */
    void retrieve(Key key, OverlayOperationCallback callback);

    /**
     * Asynchronous method to insert <code>entry</code> under the provided <code>key</code>. Implementations of this method must return immediately
     * and the completion of the insertion must be reported to the provided <code>callback</code> instance.
     * 
     * @param key
     *            The {@link Key} to associate with <code>entry</code>
     * @param entry
     *            The entry to insert.
     * @param callback
     *            The {@link OverlayOperationCallback} to which to pass the retrieval result.
     */
    void insert(Key key, Serializable entry, OverlayOperationCallback callback);

    /**
     * Asynchronous method to remove <code>entry</code> under the provided <code>key</code>. Implementations of this method must return immediately
     * and the completion of the removal must be reported to the provided <code>callback</code> instance.
     * 
     * @param key
     *            The {@link Key} associated with <code>entry</code>
     * @param entry
     *            The entry to insert.
     * @param callback
     *            The {@link OverlayOperationCallback} to which to pass the retrieval result.
     */
    void remove(Key key, Serializable entry, OverlayOperationCallback callback);

    /**
     * Asynchronous method to retrieve the entries associated with <code>key</code>. Implementations of this method must return immediately and return
     * an implementation of {@link OverlayRetrievalFuture}, which can be used later on to retrieve the retrieved results.
     * 
     * @param key
     *            The {@link Key} for that the associated entries should be retrieved.
     * @return {@link OverlayRetrievalFuture} that represents the result of the retrieve method.
     */
    OverlayRetrievalFuture retrieveAsync(Key key);

    /**
     * Asynchronous method to insert <code>entry</code> with <code>key</code>. Implementations of this method must return immediately and return an
     * implementation of {@link OverlayFuture}, which can be used later on to determine completion of the insertion.
     * 
     * @param key
     *            The {@link Key} with which <code>entry</code> will be associated.
     * @param entry
     *            The entry to insert.
     * @return {@link OverlayFuture}, which can be used later on to determine completion of the insertion.
     */
    OverlayFuture insertAsync(Key key, Serializable entry);

    /**
     * Asynchronous method to remove <code>entry</code> with <code>key</code>. Implementations of this method must return immediately and return an
     * implementation of {@link OverlayFuture}, which can be used later on to determine completion of the removal.
     * 
     * @param key
     *            The {@link Key} with which <code>entry</code> is associated.
     * @param entry
     *            The entry to remove.
     * @return {@link OverlayFuture}, which can be used later on to determine completion of the removal.
     */
    OverlayFuture removeAsync(Key key, Serializable entry);

}
